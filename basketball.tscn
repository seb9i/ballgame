[gd_scene load_steps=12 format=3 uid="uid://dem4vu137w1r8"]

[ext_resource type="Script" uid="uid://c53fvfxx4jg3n" path="res://basketball.gd" id="1_impb6"]
[ext_resource type="PackedScene" uid="uid://dtvbpoicwe373" path="res://Assets/green meter.tscn" id="4_8nfq6"]
[ext_resource type="Script" uid="uid://dyuxokih2bsx3" path="res://Assets/Trail/balltrail.gd" id="4_fgwmy"]
[ext_resource type="PackedScene" uid="uid://b2pvqe64fs4u2" path="res://Assets/Trail/trail.tscn" id="4_g73cu"]

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_uu6xs"]
bounce = 0.6

[sub_resource type="Shader" id="Shader_hvw6b"]
code = "shader_type canvas_item;

uniform vec4 color : source_color = vec4(1.0);
uniform float width : hint_range(0, 10) = 1.0;
uniform int pattern : hint_range(0, 2) = 0; // diamond, circle, square
uniform bool inside = false;
uniform bool add_margins = true; // only useful when inside is false
uniform vec2 number_of_images = vec2(1.0); // number of horizontal and vertical images in the sprite sheet

varying flat vec4 modulate;

void vertex() {
	modulate = COLOR;
	
	if (add_margins) {
		if ((UV.x <= 0.0 || UV.x >= 1.0) && (UV.y <= 0.0 || UV.y >= 1.0)) {
			VERTEX += (UV * 2.0 - 1.0) * width;
		} else {
			VERTEX += sign(VERTEX) * width; // replace sign(VERTEX) by (sign(VERTEX) * 2.0 - 1.0) if your AnimatedSprite2D isn't Centered
		}
	}
}

bool hasContraryNeighbour(vec2 uv, vec2 texture_pixel_size, vec2 image_top_left, vec2 image_bottom_right, sampler2D texture) {
	for (float i = -ceil(width); i <= ceil(width); i++) {
		float x = abs(i) > width ? width * sign(i) : i;
		float offset;
		
		if (pattern == 0) {
			offset = width - abs(x);
		} else if (pattern == 1) {
			offset = floor(sqrt(pow(width + 0.5, 2) - x * x));
		} else if (pattern == 2) {
			offset = width;
		}
		
		for (float j = -ceil(offset); j <= ceil(offset); j++) {
			float y = abs(j) > offset ? offset * sign(j) : j;
			vec2 xy = uv + texture_pixel_size * vec2(x, y);
			
			if ((xy != clamp(xy, image_top_left, image_bottom_right) || texture(texture, xy).a <= 0.0) == inside) {
				return true;
			}
		}
	}
	
	return false;
}

void fragment() {
	vec2 uv = UV;
	vec2 image_top_left = floor(uv * number_of_images) / number_of_images;
	vec2 image_bottom_right = image_top_left + vec2(1.0) / number_of_images;
	
	if (add_margins) {
		vec2 texture_pixel_size = vec2(1.0) / (vec2(1.0) / TEXTURE_PIXEL_SIZE + vec2(width * 2.0) * number_of_images);
		
		uv = (uv - texture_pixel_size * width - image_top_left) * TEXTURE_PIXEL_SIZE / texture_pixel_size + image_top_left;
		
		if (uv != clamp(uv, image_top_left, image_bottom_right)) {
			COLOR.a = 0.0;
		} else {
			COLOR = texture(TEXTURE, uv) * modulate;
		}
	} else {
		COLOR = texture(TEXTURE, uv) * modulate;
	}
	
	if ((COLOR.a > 0.0) == inside && hasContraryNeighbour(uv, TEXTURE_PIXEL_SIZE, image_top_left, image_bottom_right, TEXTURE)) {
		COLOR.rgb = inside ? mix(COLOR.rgb, color.rgb * modulate.rgb, color.a * modulate.a) : color.rgb * modulate.rgb;
		COLOR.a += (1.0 - COLOR.a) * color.a * modulate.a;
	}
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8nfq6"]
shader = SubResource("Shader_hvw6b")
shader_parameter/color = Color(0.772336, 6.76718e-05, 0.61508, 1)
shader_parameter/width = 7.173
shader_parameter/pattern = 0
shader_parameter/inside = false
shader_parameter/add_margins = true
shader_parameter/number_of_images = Vector2(1, 1)

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_g73cu"]
load_path = "res://.godot/imported/pixel_basketball_by_fri3ndlygiant_da8zpnz.png-8f6f0477dfe67b443b9ff29eeb6c9e2f.ctex"

[sub_resource type="CircleShape2D" id="CircleShape2D_r0du0"]
radius = 30.0167

[sub_resource type="Curve" id="Curve_8nfq6"]
_data = [Vector2(0, 0.802198), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 2

[sub_resource type="Gradient" id="Gradient_g73cu"]
offsets = PackedFloat32Array(0.203883, 0.946667)
colors = PackedColorArray(0.44557, 0.661084, 0.446148, 1, 1, 1, 1, 1)

[node name="Basketball" type="RigidBody2D"]
z_index = 5
position = Vector2(625, 296)
physics_material_override = SubResource("PhysicsMaterial_uu6xs")
freeze = true
freeze_mode = 1
contact_monitor = true
max_contacts_reported = 1
script = ExtResource("1_impb6")

[node name="Sprite2D" type="Sprite2D" parent="."]
z_index = 1
material = SubResource("ShaderMaterial_8nfq6")
position = Vector2(51, 8)
scale = Vector2(0.15875, 0.16)
texture = SubResource("CompressedTexture2D_g73cu")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visibility_layer = 1536
z_index = 8
position = Vector2(51, 8)
shape = SubResource("CircleShape2D_r0du0")

[node name="Timer" type="Timer" parent="."]
one_shot = true

[node name="Marker2D" type="Marker2D" parent="."]
position = Vector2(49, 29)

[node name="Control" parent="." instance=ExtResource("4_8nfq6")]
z_index = 4
offset_left = 419.0
offset_top = 320.0
offset_right = 419.0
offset_bottom = 320.0
scale = Vector2(0.393069, 0.443055)

[node name="trail" parent="." instance=ExtResource("4_g73cu")]
unique_name_in_owner = true
width_curve = SubResource("Curve_8nfq6")
gradient = SubResource("Gradient_g73cu")
script = ExtResource("4_fgwmy")

[connection signal="body_entered" from="." to="." method="_on_body_entered"]
[connection signal="body_exited" from="." to="." method="_on_body_exited"]
[connection signal="timeout" from="Timer" to="." method="_on_timer_timeout"]
